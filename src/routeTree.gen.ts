/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index/route'
import { Route as AdminUsersRouteImport } from './routes/admin/users/route'
import { Route as AdminPolicyregulationsRouteImport } from './routes/admin/policy_regulations/route'
import { Route as AdminInternalarticlesRouteImport } from './routes/admin/internal_articles/route'
import { Route as AdminIndustryarticlesRouteImport } from './routes/admin/industry_articles/route'
import { Route as AdminDictconfigRouteImport } from './routes/admin/dict_config/route'
import { Route as AdminIndexRouteImport } from './routes/admin/index/route'

// Create/Update Routes

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin/route.lazy').then((d) => d.Route))

const IndexRouteRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index/route.lazy').then((d) => d.Route))

const AdminUsersRouteRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() =>
  import('./routes/admin/users/route.lazy').then((d) => d.Route),
)

const AdminPolicyregulationsRouteRoute =
  AdminPolicyregulationsRouteImport.update({
    id: '/policy_regulations',
    path: '/policy_regulations',
    getParentRoute: () => AdminRouteRoute,
  } as any).lazy(() =>
    import('./routes/admin/policy_regulations/route.lazy').then((d) => d.Route),
  )

const AdminInternalarticlesRouteRoute = AdminInternalarticlesRouteImport.update(
  {
    id: '/internal_articles',
    path: '/internal_articles',
    getParentRoute: () => AdminRouteRoute,
  } as any,
).lazy(() =>
  import('./routes/admin/internal_articles/route.lazy').then((d) => d.Route),
)

const AdminIndustryarticlesRouteRoute = AdminIndustryarticlesRouteImport.update(
  {
    id: '/industry_articles',
    path: '/industry_articles',
    getParentRoute: () => AdminRouteRoute,
  } as any,
).lazy(() =>
  import('./routes/admin/industry_articles/route.lazy').then((d) => d.Route),
)

const AdminDictconfigRouteRoute = AdminDictconfigRouteImport.update({
  id: '/dict_config',
  path: '/dict_config',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() =>
  import('./routes/admin/dict_config/route.lazy').then((d) => d.Route),
)

const AdminIndexRouteRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() =>
  import('./routes/admin/index/route.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/dict_config': {
      id: '/admin/dict_config'
      path: '/dict_config'
      fullPath: '/admin/dict_config'
      preLoaderRoute: typeof AdminDictconfigRouteImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/industry_articles': {
      id: '/admin/industry_articles'
      path: '/industry_articles'
      fullPath: '/admin/industry_articles'
      preLoaderRoute: typeof AdminIndustryarticlesRouteImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/internal_articles': {
      id: '/admin/internal_articles'
      path: '/internal_articles'
      fullPath: '/admin/internal_articles'
      preLoaderRoute: typeof AdminInternalarticlesRouteImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/policy_regulations': {
      id: '/admin/policy_regulations'
      path: '/policy_regulations'
      fullPath: '/admin/policy_regulations'
      preLoaderRoute: typeof AdminPolicyregulationsRouteImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRouteImport
    }
  }
}

// Create and export the route tree

interface AdminRouteRouteChildren {
  AdminIndexRouteRoute: typeof AdminIndexRouteRoute
  AdminDictconfigRouteRoute: typeof AdminDictconfigRouteRoute
  AdminIndustryarticlesRouteRoute: typeof AdminIndustryarticlesRouteRoute
  AdminInternalarticlesRouteRoute: typeof AdminInternalarticlesRouteRoute
  AdminPolicyregulationsRouteRoute: typeof AdminPolicyregulationsRouteRoute
  AdminUsersRouteRoute: typeof AdminUsersRouteRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminIndexRouteRoute: AdminIndexRouteRoute,
  AdminDictconfigRouteRoute: AdminDictconfigRouteRoute,
  AdminIndustryarticlesRouteRoute: AdminIndustryarticlesRouteRoute,
  AdminInternalarticlesRouteRoute: AdminInternalarticlesRouteRoute,
  AdminPolicyregulationsRouteRoute: AdminPolicyregulationsRouteRoute,
  AdminUsersRouteRoute: AdminUsersRouteRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/': typeof AdminIndexRouteRoute
  '/admin/dict_config': typeof AdminDictconfigRouteRoute
  '/admin/industry_articles': typeof AdminIndustryarticlesRouteRoute
  '/admin/internal_articles': typeof AdminInternalarticlesRouteRoute
  '/admin/policy_regulations': typeof AdminPolicyregulationsRouteRoute
  '/admin/users': typeof AdminUsersRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/admin': typeof AdminIndexRouteRoute
  '/admin/dict_config': typeof AdminDictconfigRouteRoute
  '/admin/industry_articles': typeof AdminIndustryarticlesRouteRoute
  '/admin/internal_articles': typeof AdminInternalarticlesRouteRoute
  '/admin/policy_regulations': typeof AdminPolicyregulationsRouteRoute
  '/admin/users': typeof AdminUsersRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRouteRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/': typeof AdminIndexRouteRoute
  '/admin/dict_config': typeof AdminDictconfigRouteRoute
  '/admin/industry_articles': typeof AdminIndustryarticlesRouteRoute
  '/admin/internal_articles': typeof AdminInternalarticlesRouteRoute
  '/admin/policy_regulations': typeof AdminPolicyregulationsRouteRoute
  '/admin/users': typeof AdminUsersRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/'
    | '/admin/dict_config'
    | '/admin/industry_articles'
    | '/admin/internal_articles'
    | '/admin/policy_regulations'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/admin/dict_config'
    | '/admin/industry_articles'
    | '/admin/internal_articles'
    | '/admin/policy_regulations'
    | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/'
    | '/admin/dict_config'
    | '/admin/industry_articles'
    | '/admin/internal_articles'
    | '/admin/policy_regulations'
    | '/admin/users'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin"
      ]
    },
    "/": {
      "filePath": "index/route.tsx"
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/",
        "/admin/dict_config",
        "/admin/industry_articles",
        "/admin/internal_articles",
        "/admin/policy_regulations",
        "/admin/users"
      ]
    },
    "/admin/": {
      "filePath": "admin/index/route.tsx",
      "parent": "/admin"
    },
    "/admin/dict_config": {
      "filePath": "admin/dict_config/route.tsx",
      "parent": "/admin"
    },
    "/admin/industry_articles": {
      "filePath": "admin/industry_articles/route.tsx",
      "parent": "/admin"
    },
    "/admin/internal_articles": {
      "filePath": "admin/internal_articles/route.tsx",
      "parent": "/admin"
    },
    "/admin/policy_regulations": {
      "filePath": "admin/policy_regulations/route.tsx",
      "parent": "/admin"
    },
    "/admin/users": {
      "filePath": "admin/users/route.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
