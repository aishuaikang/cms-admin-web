/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.
// Import Routes
import { Route as rootRoute } from './routes/__root';
import { Route as AdminArticleRouteImport } from './routes/admin/article/route';
import { Route as AdminCategoryRouteImport } from './routes/admin/category/route';
import { Route as AdminDictconfigRouteImport } from './routes/admin/dict_config/route';
import { Route as AdminImageRouteImport } from './routes/admin/image/route';
import { Route as AdminIndexRouteImport } from './routes/admin/index/route';
import { Route as AdminRouteImport } from './routes/admin/route';
import { Route as AdminTagRouteImport } from './routes/admin/tag/route';
import { Route as AdminUsersRouteImport } from './routes/admin/users/route';
import { Route as IndexRouteImport } from './routes/index/route';

// Create/Update Routes

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin/route.lazy').then((d) => d.Route));

const IndexRouteRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index/route.lazy').then((d) => d.Route));

const AdminUsersRouteRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() =>
  import('./routes/admin/users/route.lazy').then((d) => d.Route)
);

const AdminTagRouteRoute = AdminTagRouteImport.update({
  id: '/tag',
  path: '/tag',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() =>
  import('./routes/admin/tag/route.lazy').then((d) => d.Route)
);

const AdminImageRouteRoute = AdminImageRouteImport.update({
  id: '/image',
  path: '/image',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() =>
  import('./routes/admin/image/route.lazy').then((d) => d.Route)
);

const AdminDictconfigRouteRoute = AdminDictconfigRouteImport.update({
  id: '/dict_config',
  path: '/dict_config',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() =>
  import('./routes/admin/dict_config/route.lazy').then((d) => d.Route)
);

const AdminCategoryRouteRoute = AdminCategoryRouteImport.update({
  id: '/category',
  path: '/category',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() =>
  import('./routes/admin/category/route.lazy').then((d) => d.Route)
);

const AdminArticleRouteRoute = AdminArticleRouteImport.update({
  id: '/article',
  path: '/article',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() =>
  import('./routes/admin/article/route.lazy').then((d) => d.Route)
);

const AdminIndexRouteRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any).lazy(() =>
  import('./routes/admin/index/route.lazy').then((d) => d.Route)
);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/admin': {
      id: '/admin';
      path: '/admin';
      fullPath: '/admin';
      preLoaderRoute: typeof AdminRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/admin/': {
      id: '/admin/';
      path: '/';
      fullPath: '/admin/';
      preLoaderRoute: typeof AdminIndexRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    '/admin/article': {
      id: '/admin/article';
      path: '/article';
      fullPath: '/admin/article';
      preLoaderRoute: typeof AdminArticleRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    '/admin/category': {
      id: '/admin/category';
      path: '/category';
      fullPath: '/admin/category';
      preLoaderRoute: typeof AdminCategoryRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    '/admin/dict_config': {
      id: '/admin/dict_config';
      path: '/dict_config';
      fullPath: '/admin/dict_config';
      preLoaderRoute: typeof AdminDictconfigRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    '/admin/image': {
      id: '/admin/image';
      path: '/image';
      fullPath: '/admin/image';
      preLoaderRoute: typeof AdminImageRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    '/admin/tag': {
      id: '/admin/tag';
      path: '/tag';
      fullPath: '/admin/tag';
      preLoaderRoute: typeof AdminTagRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    '/admin/users': {
      id: '/admin/users';
      path: '/users';
      fullPath: '/admin/users';
      preLoaderRoute: typeof AdminUsersRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
  }
}

// Create and export the route tree

interface AdminRouteRouteChildren {
  AdminIndexRouteRoute: typeof AdminIndexRouteRoute;
  AdminArticleRouteRoute: typeof AdminArticleRouteRoute;
  AdminCategoryRouteRoute: typeof AdminCategoryRouteRoute;
  AdminDictconfigRouteRoute: typeof AdminDictconfigRouteRoute;
  AdminImageRouteRoute: typeof AdminImageRouteRoute;
  AdminTagRouteRoute: typeof AdminTagRouteRoute;
  AdminUsersRouteRoute: typeof AdminUsersRouteRoute;
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminIndexRouteRoute: AdminIndexRouteRoute,
  AdminArticleRouteRoute: AdminArticleRouteRoute,
  AdminCategoryRouteRoute: AdminCategoryRouteRoute,
  AdminDictconfigRouteRoute: AdminDictconfigRouteRoute,
  AdminImageRouteRoute: AdminImageRouteRoute,
  AdminTagRouteRoute: AdminTagRouteRoute,
  AdminUsersRouteRoute: AdminUsersRouteRoute,
};

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren
);

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute;
  '/admin': typeof AdminRouteRouteWithChildren;
  '/admin/': typeof AdminIndexRouteRoute;
  '/admin/article': typeof AdminArticleRouteRoute;
  '/admin/category': typeof AdminCategoryRouteRoute;
  '/admin/dict_config': typeof AdminDictconfigRouteRoute;
  '/admin/image': typeof AdminImageRouteRoute;
  '/admin/tag': typeof AdminTagRouteRoute;
  '/admin/users': typeof AdminUsersRouteRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute;
  '/admin': typeof AdminIndexRouteRoute;
  '/admin/article': typeof AdminArticleRouteRoute;
  '/admin/category': typeof AdminCategoryRouteRoute;
  '/admin/dict_config': typeof AdminDictconfigRouteRoute;
  '/admin/image': typeof AdminImageRouteRoute;
  '/admin/tag': typeof AdminTagRouteRoute;
  '/admin/users': typeof AdminUsersRouteRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRouteRoute;
  '/admin': typeof AdminRouteRouteWithChildren;
  '/admin/': typeof AdminIndexRouteRoute;
  '/admin/article': typeof AdminArticleRouteRoute;
  '/admin/category': typeof AdminCategoryRouteRoute;
  '/admin/dict_config': typeof AdminDictconfigRouteRoute;
  '/admin/image': typeof AdminImageRouteRoute;
  '/admin/tag': typeof AdminTagRouteRoute;
  '/admin/users': typeof AdminUsersRouteRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/'
    | '/admin/article'
    | '/admin/category'
    | '/admin/dict_config'
    | '/admin/image'
    | '/admin/tag'
    | '/admin/users';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/admin'
    | '/admin/article'
    | '/admin/category'
    | '/admin/dict_config'
    | '/admin/image'
    | '/admin/tag'
    | '/admin/users';
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/'
    | '/admin/article'
    | '/admin/category'
    | '/admin/dict_config'
    | '/admin/image'
    | '/admin/tag'
    | '/admin/users';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute;
  AdminRouteRoute: typeof AdminRouteRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin"
      ]
    },
    "/": {
      "filePath": "index/route.tsx"
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/",
        "/admin/article",
        "/admin/category",
        "/admin/dict_config",
        "/admin/image",
        "/admin/tag",
        "/admin/users"
      ]
    },
    "/admin/": {
      "filePath": "admin/index/route.tsx",
      "parent": "/admin"
    },
    "/admin/article": {
      "filePath": "admin/article/route.tsx",
      "parent": "/admin"
    },
    "/admin/category": {
      "filePath": "admin/category/route.tsx",
      "parent": "/admin"
    },
    "/admin/dict_config": {
      "filePath": "admin/dict_config/route.tsx",
      "parent": "/admin"
    },
    "/admin/image": {
      "filePath": "admin/image/route.tsx",
      "parent": "/admin"
    },
    "/admin/tag": {
      "filePath": "admin/tag/route.tsx",
      "parent": "/admin"
    },
    "/admin/users": {
      "filePath": "admin/users/route.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
